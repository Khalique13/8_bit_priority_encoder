
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v
Parsing SystemVerilog input from `/openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v' to AST representation.
Generating RTLIL representation for module `\dvsd_pe'.
/openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v:0: Warning: System task `$display' outside initial block is unsupported.
Note: Assuming pure combinatorial block at /openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v:12.2-28.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_pe/runs/run3/tmp/synthesis/hierarchy.dot'.
Dumping module dvsd_pe to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \dvsd_pe

3.2. Analyzing design hierarchy..
Top module:  \dvsd_pe
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \dvsd_pe

5.1.2. Analyzing design hierarchy..
Top module:  \dvsd_pe
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v:12$5 in module dvsd_pe.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dvsd_pe.$proc$/openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v:12$5'.
     1/2: $2\out[2:0]
     2/2: $1\out[2:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\dvsd_pe.\out' from process `\dvsd_pe.$proc$/openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v:12$5': $auto$proc_dlatch.cc:427:proc_dlatch$92

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\dvsd_pe.$proc$/openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v:12$5'.
Removing empty process `dvsd_pe.$proc$/openLANE_flow/designs/dvsd_pe/src/dvsd_pe.v:12$5'.
Cleaned up 2 empty switches.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.
<suppressed ~18 debug messages>

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..
Removed 1 unused cells and 25 unused wires.
<suppressed ~2 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_pe...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_pe.
    New ctrl vector for $pmux cell $procmux$8: { $procmux$15_CMP $procmux$14_CMP $procmux$13_CMP $procmux$12_CMP $procmux$11_CMP $procmux$10_CMP $procmux$9_CMP }
  Optimizing cells in module \dvsd_pe.
Performed a total of 1 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_pe.
Performed a total of 0 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.7.16. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_pe.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 8) from port B of cell dvsd_pe.$procmux$10_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell dvsd_pe.$procmux$11_CMP0 ($eq).
Removed top 3 bits (of 8) from port B of cell dvsd_pe.$procmux$12_CMP0 ($eq).
Removed top 4 bits (of 8) from port B of cell dvsd_pe.$procmux$13_CMP0 ($eq).
Removed top 5 bits (of 8) from port B of cell dvsd_pe.$procmux$14_CMP0 ($eq).
Removed top 6 bits (of 8) from port B of cell dvsd_pe.$procmux$15_CMP0 ($eq).
Removed top 7 bits (of 8) from port B of cell dvsd_pe.$procmux$16_CMP0 ($eq).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dvsd_pe:
  created 0 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_pe.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.
<suppressed ~10 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_pe.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$a285b5a57fe61eabc57c91b8c412748ee1151a85\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~124 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.
<suppressed ~102 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..
Removed 1 unused cells and 59 unused wires.
<suppressed ~2 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\dvsd_pe' to `<abc-temp-dir>/input.blif'..
Extracted 72 gates and 82 wires to a netlist network with 9 inputs and 6 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOR cells:        4
ABC RESULTS:                OR cells:       25
ABC RESULTS:             ORNOT cells:        9
ABC RESULTS:        internal signals:       67
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        6
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..
Removed 0 unused cells and 65 unused wires.
<suppressed ~1 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \dvsd_pe

5.25.2. Analyzing design hierarchy..
Top module:  \dvsd_pe
Removed 0 unused modules.

5.26. Printing statistics.

=== dvsd_pe ===

   Number of wires:                 53
   Number of wire bits:             64
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $_ANDNOT_                      10
     $_AND_                          1
     $_DLATCH_N_                     3
     $_NAND_                         3
     $_NOR_                          4
     $_ORNOT_                        9
     $_OR_                          25

5.27. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_pe...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/dvsd_pe/runs/run3/tmp/synthesis/post_techmap.dot'.
Dumping module dvsd_pe to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dvsd_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dvsd_pe.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dvsd_pe'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dvsd_pe.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..

10. Printing statistics.

=== dvsd_pe ===

   Number of wires:                 53
   Number of wire bits:             64
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $_ANDNOT_                      10
     $_AND_                          1
     $_DLATCH_N_                     3
     $_NAND_                         3
     $_NOR_                          4
     $_ORNOT_                        9
     $_OR_                          25

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module dvsd_pe..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.
<suppressed ~1 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/khalique/openlane/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
No more expansions possible.
<suppressed ~7 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dvsd_pe':

21. Printing statistics.

=== dvsd_pe ===

   Number of wires:                 62
   Number of wire bits:             73
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $_ANDNOT_                      10
     $_AND_                          1
     $_NAND_                         3
     $_NOR_                          4
     $_ORNOT_                        9
     $_OR_                          25
     sky130_fd_sc_hd__dlxtn_1        3

[INFO]: ABC: WireLoad : S_4

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\dvsd_pe' to `/tmp/yosys-abc-65MYm1/input.blif'..
Extracted 52 gates and 61 wires to a netlist network with 9 inputs and 6 outputs.

22.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-65MYm1/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-65MYm1/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-65MYm1/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/dvsd_pe/runs/run3/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.12 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/dvsd_pe/runs/run3/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.17 sec
ABC: Memory =    7.77 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/dvsd_pe/runs/run3/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/dvsd_pe/runs/run3/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + buffer -N 5 -S 1000.0 
ABC: Node 25 has dup fanin 5.
ABC: Node 25 has dup fanin 6.
ABC: Node 25 has dup fanin 5.
ABC: Node 25 has dup fanin 6.
ABC: Node 29 has dup fanin 3.
ABC: Node 29 has dup fanin 17.
ABC: Node 29 has dup fanin 3.
ABC: Node 29 has dup fanin 17.
ABC: + upsize -D 10000.0 
ABC: Current delay (1260.63 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     30 ( 33.3 %)   Cap =  8.2 ff (  5.8 %)   Area =      227.72 ( 66.7 %)   Delay =  1257.95 ps  ( 26.7 %)               
ABC: Path  0 --       5 : 0    2 pi                        A =   0.00  Df =   5.3   -3.7 ps  S =  16.9 ps  Cin =  0.0 ff  Cout =   4.0 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      16 : 1    5 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 124.4  -27.3 ps  S = 114.6 ps  Cin =  2.1 ff  Cout =   8.9 ff  Cmax = 130.0 ff  G =  401  
ABC: Path  2 --      23 : 4    1 sky130_fd_sc_hd__a2bb2o_2 A =  11.26  Df = 396.4  -71.8 ps  S =  37.9 ps  Cin =  1.7 ff  Cout =   1.5 ff  Cmax = 300.3 ff  G =   80  
ABC: Path  3 --      24 : 3    1 sky130_fd_sc_hd__or3_2    A =   7.51  Df = 809.9 -385.2 ps  S =  84.5 ps  Cin =  1.5 ff  Cout =   5.1 ff  Cmax = 310.4 ff  G =  318  
ABC: Path  4 --      28 : 3    2 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =1102.0 -582.4 ps  S = 296.1 ps  Cin =  4.6 ff  Cout =  22.7 ff  Cmax = 128.2 ff  G =  492  
ABC: Path  5 --      36 : 3    1 sky130_fd_sc_hd__o21ai_2  A =   8.76  Df =1258.0 -488.7 ps  S = 237.2 ps  Cin =  4.5 ff  Cout =  17.6 ff  Cmax = 139.2 ff  G =  388  
ABC: Start-point = pi4 (\in [5]).  End-point = po0 ($abc$476$auto$rtlil.cc:2131:ReduceOr$89).
ABC: + print_stats -m 
ABC: netlist                       : i/o =    9/    6  lat =    0  nd =    30  edge =     80  area =227.70  delay = 5.00  lev = 5
ABC: + write_blif /tmp/yosys-abc-65MYm1/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:        internal signals:       46
ABC RESULTS:           input signals:        9
ABC RESULTS:          output signals:        6
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dvsd_pe..
Removed 0 unused cells and 70 unused wires.
<suppressed ~1 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).

28. Executing CHECK pass (checking for obvious problems).
Checking module dvsd_pe...
Warning: Wire dvsd_pe.\out [2] is used but has no driver.
Warning: Wire dvsd_pe.\out [1] is used but has no driver.
Warning: Wire dvsd_pe.\out [0] is used but has no driver.
Warning: Wire dvsd_pe.\gs is used but has no driver.
Warning: Wire dvsd_pe.\eno is used but has no driver.
Found and reported 5 problems.

29. Printing statistics.

=== dvsd_pe ===

   Number of wires:                 33
   Number of wire bits:             42
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     sky130_fd_sc_hd__a2111o_2       1
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__buf_1          4
     sky130_fd_sc_hd__dlxtn_1        3
     sky130_fd_sc_hd__inv_2          6
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__o21ai_2        1
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o41a_2         2
     sky130_fd_sc_hd__or2_2          2
     sky130_fd_sc_hd__or3_2          3
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4_2          1
     sky130_fd_sc_hd__or4b_2         1

   Chip area for module '\dvsd_pe': 272.761600

30. Executing Verilog backend.
Dumping module `\dvsd_pe'.

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 2857e13363, CPU: user 0.94s system 0.05s, MEM: 43.98 MB peak
Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)
Time spent: 41% 2x abc (0 sec), 30% 4x stat (0 sec), ...
